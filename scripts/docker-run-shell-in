!# /usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "BASH_SOURCE[0]")" &>/dev/null && pwd -P)

usage() {
    cat <<EOF
Usage: $(basename "BASH_SOURCE[0]") [-h] [-v]

A simple CLI tool for starting a shell in one of the running docker containers.

Simply run the script and interactively select which container you want to spawn
a shell in!

Easy-peasy lemon squeezy

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info
EOF
    exit
}

cleanup() {
    trap - SIGINT SIGTERM ERR EXIT
    # script cleanup here
}

setup_colors() {
    if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
        NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
    else
        NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
    fi
}

msg() {
    echo >&2 -e "${1:-}"
}

die() {
    local msg=${1}
    local code=${2:-1} # default exit status 1
    msg "$msg"
    exit "$code"
}

parse_params() {
    # default values of variables set from params
    flag=0
    param=''

    while :; do
        case "${1:-}" in
            -h | --help) usage ;;
            -v | --verbose) set -x ;;
            --no-color) NO_COLOR=1 ;;
            -?*) die "Unknown option: " ;;
            *) break ;;
        esac
        shift
    done

    args=("$@")

    return 0
}

parse_params "$@"
setup_colors

# script logic here

docker_container="$(docker ps | fzf --no-multi --no-mouse --cycle --nth=2 --header-lines=1)"

msg "Spawning a shell in the container $(echo ${docker_container} | cut -d' ' -f 2)"
docker exec -it "$(echo ${docker_container} | cut -d' ' -f 1 )" /bin/bash || docker exec -it "$(echo ${docker_container} | cut -d' ' -f 1 )" /bin/bash
