#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT
set -x

script_dir=$(cd "$(dirname "BASH_SOURCE[0]")" &>/dev/null && pwd -P)

usage() {
    cat <<EOF
Usage: $(basename "BASH_SOURCE[0]") [-h] [-v] [-f] -p param_value arg1 [arg2...]

Review the given pr number in this repo commit by commit.

starts at the first available commit, and then continues on [Enter] until done.

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info
-f, --flag      Some flag description
-p, --param     Some param description
EOF
    exit
}

cleanup() {
    trap - SIGINT SIGTERM ERR EXIT
    # script cleanup here
}

setup_colors() {
    if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
        NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
    else
        NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
    fi
}

msg() {
    echo >&2 -e "${1:-}"
}

die() {
    local msg=${1}
    local code=${2:-1} # default exit status 1
    msg "$msg"
    exit "$code"
}

parse_params() {
    # default values of variables set from params
    flag=0
    param=''

    while :; do
        case "${1:-}" in
            -h | --help) usage ;;
            -v | --verbose) set -x ;;
            --no-color) NO_COLOR=1 ;;
            -f | --flag) flag=1 ;; # example flag
            -p | --param) # example named parameter
                param="${2:-}"
                shift
                ;;
            -?*) die "Unknown option: " ;;
            *) break ;;
        esac
        shift
    done

    args=("$@")

    # check required params and arguments
    # [[ -z "${param-}" ]] && die "Missing required parameter: param"
    [[ ${#args[@]} -ne 1 ]] && die "Missing script argument <pr-number>"

    return 0
}

function required_programs() {
    for cmd in "$@"; do
        which ${cmd} || die "${cmd} program not found in path"
    done
}

function checkout_pr() {
    local -r pr_number="$1"
    gh pr checkout "${pr_number}"
}

function get_pr_commits() {
    local -r first_commit="$(git log --oneline | fzf --disabled)"
    local -r commits_in_pr="$(git log --format=%H ${first_commit}..HEAD | tac)"
    echo "${commits_in_pr}"
}

function review_commit() {
    local -r commit="$1"
    git checkout ${commit}
    read -r || die "User EOF. Exiting"
}

function review_pr() {
    local -r pr_number="$1"
    for commit in $(get_pr_commits ${pr_number}); do
        review_commit ${commit}
    done
}

msg "Checking the required programs"
required_programs gh fzf
parse_params "$@"
setup_colors

# script logic here

msg "Checking out pr $1..."
checkout_pr "$1"
msg "reviwing pr $1..."
review_pr "$1"

msg "${RED}Read parameters:${NOFORMAT}"
msg "- flag: ${flag}"
msg "- param: ${param}"
msg "- arguments: ${args[*]-}"
